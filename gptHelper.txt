
I prefer readability.
I like each calculation to have their own val/ def / line of code, if possible.
Meaning to use intermediate variables:
So returned tuples should for example be:
NextElement =...
NextState =...
(NextElement, NextState)

If you use a foldRight/Left, i like to have it split into intermediate steps like:
val initAcc = ...
def folder = ...
list.foldRight(initAcc)(folder)

I prefer clearly named variables and parameters, such as countOfStudents instead of 'n'

I have different rankings of how much the teacher likes different coding styles:
BEST:
variables using val
value bindings
expression values
parametric polymorphism
Composed dedicated higher order functions
Using dedicated API if possible such as State
Options or Either monad

MIDDLE:
simple recursion.
folds
if condition / pattern matching 

WORST:
variables using var
Return statement
any/object type
loops
exceptions

I will provide you with a custom implementation of some libraries, i want you to use those if provided.
Remember that all implementation should happen in the exam.scala file, so please don't invent new methods for the custom library implementations.

If a full signature is provided such as:
lazy val intAddition: Monoid[Int] = ???
Don't then change it to:
val intAddition: Monoid[Int] = 
In other words, don't try to change the skeleton requirements, if they are set.
But you are allowed to change parameternames to something meaningful:
def someName(f: A => B): Int =
def someName(transform: A => B): Int =
Except if it is a string in a property, then maintain the string as is:
property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
Also maintain the names of the methods.


Don't remove existing comments.
Some exercises also require text answers, do that as a comment close to the exercise.