# **Coding Guidelines**

---

## **1. Readability is a Priority**
- Prefer **clean, readable code** with intermediate steps.  
- Avoid overly compressed code or complex one-liners.

---

## **2. Intermediate Variables**
- Use meaningful intermediate variables for clarity.  
- Example:
   ```scala
   val nextElement = ...
   val nextState = ...
   (nextElement, nextState)
   ```

- **FoldRight/FoldLeft** should follow this structure:
   ```scala
   val initAcc = ...
   def folder = ...
   list.foldRight(initAcc)(folder)
   ```

---

## **3. Naming Conventions**
- Use **clearly named variables and parameters**:  
   - ✅ `countOfStudents`  
   - ❌ `n`  
- **Do not change method names**

- **Parameter Renaming**: You can rename parameters for clarity:  
   ```scala
   def someName(f: A => B): Int =
   def someName(transform: A => B): Int =
   ```
- **Do not alter strings in properties**:  
   ```scala
   property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
   property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
   ```

---

## **4. Coding Style Preferences**

### **BEST:**
- Variables using `val`  
- Value bindings  
- Expression values  
- Parametric polymorphism  
- Composed higher-order functions  
- Dedicated APIs (e.g., `State`)  
- Using `Option` or `Either` monads  

### **MIDDLE:**
- Simple recursion  
- Folds  
- `if` conditions / pattern matching  

### **WORST:**
- Variables using `var`  
- Return statements  
- `Any`/`Object` types  
- Loops  
- Exceptions  

---

## **5. Library Usage**
- If custom library implementations are provided, **use them as-is**.  
- **Do not add new methods** to these custom libraries.  
- All implementations must remain in `exam.scala`.  


---

## **6. Comments and Documentation**
- **Do not remove existing comments.**  
- Text answers for exercises must be included as **comments near the relevant exercise**.

---

## **7. Testing Guidelines**

### **7.1 General Testing Structure**

When adding/solving some method of exercise, then add a test to ensure it works. Like such:

```scala
package adpro

import org.scalacheck.{Gen, Arbitrary}
import org.scalacheck.Arbitrary.arbitrary
import org.scalacheck.Prop.{forAll, forAllNoShrink}
import org.scalacheck.Prop
import org.scalactic.TripleEquals.*

object ExamSpec
  extends org.scalacheck.Properties("exam-2024-autumn"):

  property("A test that always passes (a sanity check)") =
    forAll { (n: Int) => n == n }

end ExamSpec

object StreamingSpec extends org.scalacheck.Properties("lazylist__"):

  /** Fixed input test cases **/
  property("00 fib(0) returns 0") = fib(0) === 0
  property("01 fib(1) returns 1") = fib(1) === 1

  /** Random input tests **/
  property("02 fib(n) satisfies recurrence relation") =
    forAll(Gen.choose(2, 50)) { n =>
      fib(n) === fib(n - 1) + fib(n - 2)
    }

  /** LazyList behavior tests **/
  given arbLazyList[A: Arbitrary]: Arbitrary[LazyList[A]] =
    Arbitrary(summon[Arbitrary[List[A]]].arbitrary.map(LazyList(_*)))

  property("03 LazyList generates expected sequence") =
    forAll(Gen.choose(0, 10)) { start =>
      LazyList.from(start).take(5).toList == List(start, start + 1, start + 2, start + 3, start + 4)
    }

  property("04 LazyList.take returns specified number of elements") =
    forAll(Gen.choose(1, 10)) { n =>
      LazyList.from(1).take(n).toList.length == n
    }

end StreamingSpec
```

---

## **8. Skeleton Requirements**
- If the exam provides a **predefined method signature**, follow it exactly:
   ```scala
   lazy val intAddition: Monoid[Int] = ???
   ```
- Do **not** change it to:
   ```scala
   val intAddition: Monoid[Int] = ...
   ```

- However, parameter names can be updated for clarity:
   ```scala
   def someName(f: A => B): Int =
   def someName(transform: A => B): Int =
   ```

- Maintain **string literals in properties** exactly as provided:
   ```scala
   property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
   property("Ex14.02: optionFunctor satisfies map law (tests Exercise 13)") =
   ```

---

