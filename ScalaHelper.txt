Run:
scala-cli run .
scala-cli run . -M adpro.intro.printAbs
scala-cli run . -M adpro.state.runAllExercises

Eller vs code med F5


Run with test:
scala-cli test . -w
scala-cli test . -- -f Ex02
scala-cli test . -- -f Ex01

Compile:
scala-cli compile .

Repl:
scala-cli repl .

Lav en main til metoden såsom:
@main def runFib: Unit =
  println(fib(10))

adpro.intro.runFib


Remove scala generated files:
scala-cli clean .

Run tests of only one exercise:
scala-cli test . -- -f Ex01




-----------code------


-----For prints!------

Lav en property test med print i sig.

      // Debug Output
      //println(s"\nTesting primesApart($n):")
      //pairs.foreach { case (p1, p2) => println(s"($p1, $p2)") }


Husk i test at man skal importe selve opgaven:
import adpro.PrimesAndLaziness.*
for at bruge metoderne:
val pairs = PrimesAndLaziness.primesApart(n).take(5).toList

------------FOLDLEFT SYNTAX:----------------
  def fViaFold (l: LazyList[Int]): Int = 
    l.foldLeft(0)((acc, a) => acc + (if a % 2 == 1 then 1 else 0))

  def fViaFold(l: LazyList[Int]): Int = 
    val initAcc = 0 // Define the initial accumulator value
    def Folder(acc: Int, a: Int): Int = // Define the folder function
      if a % 2 == 1 then acc + 1 // Increment accumulator if `a` is odd
      else acc // Keep accumulator unchanged if `a` is even
    l.foldLeft(initAcc)(Folder) // Apply foldLeft with initial value and folder function

-------------FoldRight Syntax------------------

  def fViaFoldRight(l: LazyList[Int]): Int = 
    val initAcc = 0 // Define the initial accumulator value
    def Folder(a: Int, acc: Int): Int = // Define the folder function
      if a % 2 == 1 then acc + 1 // Increment accumulator if `a` is odd
      else acc // Keep accumulator unchanged if `a` is even
    l.foldRight(initAcc)(Folder) // Apply foldRight with initial value and folder function

-----------Right vs left------------------------

  /**
   * Explanation of foldLeft vs foldRight:
   * - `foldLeft` processes elements from the head (leftmost element) to the tail.
   * - `foldRight` processes elements from the tail (rightmost element) to the head.
   * - For large LazyLists, `foldLeft` is generally more efficient because it is tail-recursive.
   * - `foldRight` can be more expressive with infinite LazyLists because it avoids strict evaluation.
   * Recommendation:
   * - Use `foldLeft` for finite lists where efficiency is critical.
   * - Use `foldRight` for potentially infinite lists or when delayed evaluation is required.
   */


-------Functioner der returnere en function------------------

  def SafeTotal[A,B](f: A => B): A => Option[B] = 

Så skal man stortset altid starte function implementation med:
    a => 